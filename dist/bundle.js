(()=>{"use strict";var e={819:(e,t,s)=>{s.r(t),s.d(t,{default:()=>o});var i=s(537),n=s.n(i),r=s(645),l=s.n(r)()(n());l.push([e.id,':host{display:block}:host([hidden]){display:none}.slider{max-width:var(--max-width, 100%);overflow:hidden;margin:0 auto;touch-action:none;display:flex;align-items:center;position:relative}.slider:hover{cursor:grab}.slider__slides{--slide-width: calc((100 / var(--num-slides, 3)) * .95%);display:flex;position:relative;left:calc(var(--slide-width)*-1)}.slider__slides.slide-image{--transition-speed: .5s;transition:transform var(--transition-speed) cubic-bezier(0, 0, 1, 1)}.slider__slides:after{content:"";position:absolute;width:100%;height:100%;left:var(--slide-width)}.slider__slide{flex:0 0 var(--slide-width);padding-right:.5rem;box-sizing:border-box}.slider__slide img{width:100%;height:100%}.slider__controls{display:flex;position:absolute;justify-content:space-between;width:100%}.slider__button{background:#4682b4;border:1px solid #4682b4;padding:.5rem .625rem;color:#fff;font-size:1rem;transition:all .25s ease;position:absolute}.slider__button.left{left:5px}.slider__button.right{right:5px}.slider__button:hover{color:#4682b4;background:#fff;border:1px solid #4682b4}',"",{version:3,sources:["webpack://./src/slider-image.scss"],names:[],mappings:"AAAA,MACE,aAAA,CAGF,gBACE,YAAA,CAWF,QACE,gCAAA,CACA,eAAA,CACA,aAAA,CACA,iBAAA,CACA,YAAA,CACA,kBAAA,CACA,iBAAA,CAEA,cACE,WAAA,CAGF,gBACE,wDAAA,CACA,YAAA,CACA,iBAAA,CACA,gCAAA,CAEA,4BACE,uBAAA,CACA,qEAAA,CAGF,sBACE,UAAA,CACA,iBAAA,CACA,UAAA,CACA,WAAA,CACA,uBAAA,CAIJ,eACE,2BAAA,CACA,mBAAA,CACA,qBAAA,CAEA,mBACE,UAAA,CACA,WAAA,CAIJ,kBACE,YAAA,CACA,iBAAA,CACA,6BAAA,CACA,UAAA,CAGF,gBACE,kBAAA,CACA,wBAAA,CACA,qBAAA,CACA,UAAA,CACA,cAAA,CACA,wBAAA,CACA,iBAAA,CAEA,qBACE,QAAA,CAGF,sBACE,SAAA,CAGF,sBACE,aAAA,CACA,eAAA,CACA,wBAAA",sourcesContent:[":host {\n  display: block;\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n//:host([maxwidth]) {\n//  --max-width1: var(--max-width);\n//}\n//\n//:host([numslides]) {\n//  --slide-width: calc(100 / var(--num-slides) * .95)\n//}\n\n.slider {\n  max-width: var(--max-width, 100%);\n  overflow: hidden;\n  margin: 0 auto;\n  touch-action: none;\n  display: flex;\n  align-items: center;\n  position: relative;\n\n  &:hover {\n    cursor: grab;\n  }\n\n  &__slides {\n    --slide-width: calc((100 / var(--num-slides, 3)) * .95%);\n    display: flex;\n    position: relative;\n    left: calc(var(--slide-width) * -1);\n\n    &.slide-image {\n      --transition-speed: .5s;\n      transition: transform var(--transition-speed) cubic-bezier(0, 0, 1, 1);\n    }\n\n    &:after {\n      content: '';\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      left: var(--slide-width);\n    }\n  }\n\n  &__slide {\n    flex: 0 0 var(--slide-width); // the flex basis value is equal to the inverse of the left value above\n    padding-right: .5rem;\n    box-sizing: border-box;\n\n    img {\n      width: 100%;\n      height: 100%;\n    }\n  }\n\n  &__controls {\n    display: flex;\n    position: absolute;\n    justify-content: space-between;\n    width: 100%;\n  }\n\n  &__button {\n    background: steelblue;\n    border: 1px solid steelblue;\n    padding: .5rem .625rem;\n    color: #fff;\n    font-size: 1rem;\n    transition: all 0.25s ease;\n    position: absolute;\n\n    &.left {\n      left: 5px;\n    }\n\n    &.right {\n      right: 5px;\n    }\n\n    &:hover {\n      color: steelblue;\n      background: white;\n      border: 1px solid steelblue;\n    }\n  }\n}\n"],sourceRoot:""}]);const o=l},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var s="",i=void 0!==t[5];return t[4]&&(s+="@supports (".concat(t[4],") {")),t[2]&&(s+="@media ".concat(t[2]," {")),i&&(s+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),s+=e(t),i&&(s+="}"),t[2]&&(s+="}"),t[4]&&(s+="}"),s})).join("")},t.i=function(e,s,i,n,r){"string"==typeof e&&(e=[[null,e,void 0]]);var l={};if(i)for(var o=0;o<this.length;o++){var d=this[o][0];null!=d&&(l[d]=!0)}for(var a=0;a<e.length;a++){var h=[].concat(e[a]);i&&l[h[0]]||(void 0!==r&&(void 0===h[5]||(h[1]="@layer".concat(h[5].length>0?" ".concat(h[5]):""," {").concat(h[1],"}")),h[5]=r),s&&(h[2]?(h[1]="@media ".concat(h[2]," {").concat(h[1],"}"),h[2]=s):h[2]=s),n&&(h[4]?(h[1]="@supports (".concat(h[4],") {").concat(h[1],"}"),h[4]=n):h[4]="".concat(n)),t.push(h))}},t}},537:e=>{e.exports=function(e){var t=e[1],s=e[3];if(!s)return t;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),n="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),r="/*# ".concat(n," */"),l=s.sources.map((function(e){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(e," */")}));return[t].concat(l).concat([r]).join("\n")}return[t].join("\n")}},306:(e,t,s)=>{s.r(t),s.d(t,{default:()=>i});const i='<div class="slider"> <div class="slider__slides"></div> <button class="slider__button left"> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-caret-left-fill" viewBox="0 0 16 16"> <path d="m3.86 8.753 5.482 4.796c.646.566 1.658.106 1.658-.753V3.204a1 1 0 0 0-1.659-.753l-5.48 4.796a1 1 0 0 0 0 1.506z"/> </svg> </button> <button class="slider__button right"> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-caret-right-fill" viewBox="0 0 16 16"> <path d="m12.14 8.753-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z"/> </svg> </button> </div>'},811:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=s(819),n=s(306),r=document.createElement("template");r.innerHTML=n.default;class l extends HTMLElement{constructor(){super(),this.slides=[],this.imageOrder=[],this.isSlidingLeft=!0,this.isScrolling=!1,this.start=0,this.scrolled=0,this.slideWidthPx=0,this.autoplay=()=>{},this.reorderSlides=()=>{if(this.slidesWrapper.classList.remove("slide-image"),Math.abs(this.scrolled)>0)return this.scrolled=0;let e=this.isSlidingLeft?this.slides.length-1:1;this.setSlidesFlexOrder(e),this.slideReset(),setTimeout((()=>this.autoplay()),0)},this.handleClick=e=>{const t=e.currentTarget;this.isSlidingLeft=t.classList.contains("left"),this.slidesWrapper.classList.add("slide-image"),this.slideX()},this.handlePointerDown=e=>{e.preventDefault();const t=e.currentTarget;t.setPointerCapture(e.pointerId),t.style.cursor="grabbing",this.isScrolling=!0,this.start=e.clientX,this.disableStepInterval()},this.handlePointerMove=e=>{e.preventDefault(),this.isScrolling&&(this.scrolled=e.clientX-this.start,this.isSlidingLeft=this.scrolled<0,this.slideX(),Math.abs(this.scrolled/this.slideWidthPx)>1&&(this.scrolled=0,this.reorderSlides(),this.start=e.clientX))},this.handlePointerUp=e=>{e.preventDefault(),this.slidesWrapper.classList.add("slide-image"),Math.abs(this.scrolled/this.slideWidthPx)>.5?(this.scrolled=0,this.slideX()):this.slideReset(),this.isScrolling=!1,this.autoplay()},this.slideX=()=>this.slidesWrapper.style.transform=this.scrolled?`translateX(${this.scrolled}px)`:`translateX(${(this.isSlidingLeft?-1:1)*this.slideWidthPx}px)`,this.slideReset=()=>this.slidesWrapper.style.transform="translateX(0)",this.attachShadow({mode:"open"}),this.shadowDOM=this.shadowRoot,this.shadowDOM.appendChild(r.content.cloneNode(!0)),this.stylesheet=this.addStyleSheet(),this.slidesWrapper=this.shadowDOM.querySelector(".slider__slides"),this.sliderButtons=this.shadowDOM.querySelectorAll("button");try{this.slides=this.initSlides(),this.slidesWrapper.append(...this.slides),this.imageOrder=this.initSlidesFlexOrder(this.slides),this.setSlidesFlexOrder(),this.handleUserSettings()}catch(e){e instanceof Error&&console.log(`Image Loading Error: ${e.message}`)}}connectedCallback(){this.setEvents(),this.hidden=!1,this.slideWidthPx=this.slides[0].getBoundingClientRect().width}initSlides(){const e=document.createElement("slot");if(e.name="slide",this.shadowDOM.append(e),!e.assignedNodes().length)throw new Error("No properly formatted images found");const t=Array.from({length:2*e.assignedNodes().length});for(let s=0;s<=t.length/2-1;s++){let[i]=e.assignedNodes();const n=document.createElement("div");n.classList.add("slider__slide"),n.append(i),t[s]=n,t[s+t.length/2]=n.cloneNode(!0)}return t}initAutoPlay(){const e=this.getAttribute("auto-play-mode"),[t,s]=this.sliderButtons;return()=>{switch(e){case"crawl":this.slidesWrapper.removeEventListener("pointerdown",this.handlePointerDown),this.slidesWrapper.removeEventListener("pointermove",this.handlePointerMove),this.slidesWrapper.removeEventListener("pointerup",this.handlePointerUp);const e=this.getAttribute("crawl-timing"),i=6e3;return this.stylesheet.insertRule(`.slider__slides.slide-image{--transition-speed:${e||i}ms`,this.stylesheet.cssRules.length),this.stylesheet.insertRule(".slider:hover{cursor:default}",this.stylesheet.cssRules.length),this.isSlidingLeft?t.click():s.click();case"step":if(this.autoPlayIntervalID)return;const n=this.getAttribute("step-timing"),r=2e3;return this.autoPlayIntervalID=setInterval((()=>this.isSlidingLeft?t.click():s.click()),Number(n)||r)}}}disableStepInterval(){clearInterval(this.autoPlayIntervalID),this.autoPlayIntervalID=null}addStyleSheet(){const e=document.createElement("style");return e.textContent=i.default,this.shadowDOM.append(e),e.sheet}handleUserSettings(){this.autoplay=this.initAutoPlay(),this.hasAttribute("hide-controls")&&this.sliderButtons.forEach((e=>e.hidden=!0))}setMaxWidth(){const e=this.getAttribute("max-width");e&&this.stylesheet.insertRule(`.slider{--max-width:${e}}`,this.stylesheet.cssRules.length)}setNumSlides(){this.getAttribute("num-slides")}setSlideWidthPercent(e){return Math.floor(100/e*.95)}setEvents(){this.sliderButtons.forEach((e=>e.addEventListener("click",this.handleClick))),this.slidesWrapper.addEventListener("transitionend",this.reorderSlides),this.slidesWrapper.addEventListener("pointerdown",this.handlePointerDown),this.slidesWrapper.addEventListener("pointermove",this.handlePointerMove),this.slidesWrapper.addEventListener("pointerup",this.handlePointerUp),window.addEventListener("load",this.autoplay),window.addEventListener("resize",(()=>this.slideWidthPx=this.slides[0].getBoundingClientRect().width))}initSlidesFlexOrder(e){return Array.from({length:e.length},((t,s)=>(s+1)%e.length))}setSlidesFlexOrder(e=0){this.slides.forEach(((t,s)=>{this.imageOrder[s]=(this.imageOrder[s]+e)%this.slides.length,t.style.order=this.imageOrder[s].toString()}))}}t.default=l}},t={};function s(i){var n=t[i];if(void 0!==n)return n.exports;var r=t[i]={id:i,exports:{}};return e[i](r,r.exports,s),r.exports}s.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return s.d(t,{a:t}),t},s.d=(e,t)=>{for(var i in t)s.o(t,i)&&!s.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{const e=s(811);customElements.define("image-slider",e.default)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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VyxFQUFFN0osRUFBUzRKLElBQzVFRSxPQUFPQyxlQUFlL0osRUFBUzRKLEVBQUssQ0FBRUksWUFBWSxFQUFNQyxJQUFLTixFQUFXQyxNQ0ozRVYsRUFBb0JXLEVBQUksQ0FBQ0ssRUFBS0MsSUFBVUwsT0FBT00sVUFBVUMsZUFBZUMsS0FBS0osRUFBS0MsR0NDbEZqQixFQUFvQnFCLEVBQUt2SyxJQUNILG9CQUFYd0ssUUFBMEJBLE9BQU9DLGFBQzFDWCxPQUFPQyxlQUFlL0osRUFBU3dLLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFosT0FBT0MsZUFBZS9KLEVBQVMsYUFBYyxDQUFFMEssT0FBTyxLLE1DTHZELGVBQ0FDLGVBQWVDLE9BQU8sZUFBZ0IsWSIsInNvdXJjZXMiOlsid2VicGFjazovL2ltYWdlLXNsaWRlci8uL3NyYy9zbGlkZXItaW1hZ2Uuc2NzcyIsIndlYnBhY2s6Ly9pbWFnZS1zbGlkZXIvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL2ltYWdlLXNsaWRlci8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL2ltYWdlLXNsaWRlci8uL3NyYy9zbGlkZXItaW1hZ2UuaHRtbCIsIndlYnBhY2s6Ly9pbWFnZS1zbGlkZXIvLi9zcmMvc2xpZGVyLWltYWdlLnRzIiwid2VicGFjazovL2ltYWdlLXNsaWRlci93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9pbWFnZS1zbGlkZXIvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vaW1hZ2Utc2xpZGVyL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9pbWFnZS1zbGlkZXIvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9pbWFnZS1zbGlkZXIvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9pbWFnZS1zbGlkZXIvLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCI6aG9zdHtkaXNwbGF5OmJsb2NrfTpob3N0KFtoaWRkZW5dKXtkaXNwbGF5Om5vbmV9LnNsaWRlcnttYXgtd2lkdGg6dmFyKC0tbWF4LXdpZHRoLCAxMDAlKTtvdmVyZmxvdzpoaWRkZW47bWFyZ2luOjAgYXV0bzt0b3VjaC1hY3Rpb246bm9uZTtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO3Bvc2l0aW9uOnJlbGF0aXZlfS5zbGlkZXI6aG92ZXJ7Y3Vyc29yOmdyYWJ9LnNsaWRlcl9fc2xpZGVzey0tc2xpZGUtd2lkdGg6IGNhbGMoKDEwMCAvIHZhcigtLW51bS1zbGlkZXMsIDMpKSAqIC45NSUpO2Rpc3BsYXk6ZmxleDtwb3NpdGlvbjpyZWxhdGl2ZTtsZWZ0OmNhbGModmFyKC0tc2xpZGUtd2lkdGgpKi0xKX0uc2xpZGVyX19zbGlkZXMuc2xpZGUtaW1hZ2V7LS10cmFuc2l0aW9uLXNwZWVkOiAuNXM7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gdmFyKC0tdHJhbnNpdGlvbi1zcGVlZCkgY3ViaWMtYmV6aWVyKDAsIDAsIDEsIDEpfS5zbGlkZXJfX3NsaWRlczphZnRlcntjb250ZW50OlxcXCJcXFwiO3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7bGVmdDp2YXIoLS1zbGlkZS13aWR0aCl9LnNsaWRlcl9fc2xpZGV7ZmxleDowIDAgdmFyKC0tc2xpZGUtd2lkdGgpO3BhZGRpbmctcmlnaHQ6LjVyZW07Ym94LXNpemluZzpib3JkZXItYm94fS5zbGlkZXJfX3NsaWRlIGltZ3t3aWR0aDoxMDAlO2hlaWdodDoxMDAlfS5zbGlkZXJfX2NvbnRyb2xze2Rpc3BsYXk6ZmxleDtwb3NpdGlvbjphYnNvbHV0ZTtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2Vlbjt3aWR0aDoxMDAlfS5zbGlkZXJfX2J1dHRvbntiYWNrZ3JvdW5kOiM0NjgyYjQ7Ym9yZGVyOjFweCBzb2xpZCAjNDY4MmI0O3BhZGRpbmc6LjVyZW0gLjYyNXJlbTtjb2xvcjojZmZmO2ZvbnQtc2l6ZToxcmVtO3RyYW5zaXRpb246YWxsIC4yNXMgZWFzZTtwb3NpdGlvbjphYnNvbHV0ZX0uc2xpZGVyX19idXR0b24ubGVmdHtsZWZ0OjVweH0uc2xpZGVyX19idXR0b24ucmlnaHR7cmlnaHQ6NXB4fS5zbGlkZXJfX2J1dHRvbjpob3Zlcntjb2xvcjojNDY4MmI0O2JhY2tncm91bmQ6I2ZmZjtib3JkZXI6MXB4IHNvbGlkICM0NjgyYjR9XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3NsaWRlci1pbWFnZS5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLE1BQ0UsYUFBQSxDQUdGLGdCQUNFLFlBQUEsQ0FXRixRQUNFLGdDQUFBLENBQ0EsZUFBQSxDQUNBLGFBQUEsQ0FDQSxpQkFBQSxDQUNBLFlBQUEsQ0FDQSxrQkFBQSxDQUNBLGlCQUFBLENBRUEsY0FDRSxXQUFBLENBR0YsZ0JBQ0Usd0RBQUEsQ0FDQSxZQUFBLENBQ0EsaUJBQUEsQ0FDQSxnQ0FBQSxDQUVBLDRCQUNFLHVCQUFBLENBQ0EscUVBQUEsQ0FHRixzQkFDRSxVQUFBLENBQ0EsaUJBQUEsQ0FDQSxVQUFBLENBQ0EsV0FBQSxDQUNBLHVCQUFBLENBSUosZUFDRSwyQkFBQSxDQUNBLG1CQUFBLENBQ0EscUJBQUEsQ0FFQSxtQkFDRSxVQUFBLENBQ0EsV0FBQSxDQUlKLGtCQUNFLFlBQUEsQ0FDQSxpQkFBQSxDQUNBLDZCQUFBLENBQ0EsVUFBQSxDQUdGLGdCQUNFLGtCQUFBLENBQ0Esd0JBQUEsQ0FDQSxxQkFBQSxDQUNBLFVBQUEsQ0FDQSxjQUFBLENBQ0Esd0JBQUEsQ0FDQSxpQkFBQSxDQUVBLHFCQUNFLFFBQUEsQ0FHRixzQkFDRSxTQUFBLENBR0Ysc0JBQ0UsYUFBQSxDQUNBLGVBQUEsQ0FDQSx3QkFBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI6aG9zdCB7XFxuICBkaXNwbGF5OiBibG9jaztcXG59XFxuXFxuOmhvc3QoW2hpZGRlbl0pIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi8vOmhvc3QoW21heHdpZHRoXSkge1xcbi8vICAtLW1heC13aWR0aDE6IHZhcigtLW1heC13aWR0aCk7XFxuLy99XFxuLy9cXG4vLzpob3N0KFtudW1zbGlkZXNdKSB7XFxuLy8gIC0tc2xpZGUtd2lkdGg6IGNhbGMoMTAwIC8gdmFyKC0tbnVtLXNsaWRlcykgKiAuOTUpXFxuLy99XFxuXFxuLnNsaWRlciB7XFxuICBtYXgtd2lkdGg6IHZhcigtLW1heC13aWR0aCwgMTAwJSk7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgbWFyZ2luOiAwIGF1dG87XFxuICB0b3VjaC1hY3Rpb246IG5vbmU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG5cXG4gICY6aG92ZXIge1xcbiAgICBjdXJzb3I6IGdyYWI7XFxuICB9XFxuXFxuICAmX19zbGlkZXMge1xcbiAgICAtLXNsaWRlLXdpZHRoOiBjYWxjKCgxMDAgLyB2YXIoLS1udW0tc2xpZGVzLCAzKSkgKiAuOTUlKTtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICBsZWZ0OiBjYWxjKHZhcigtLXNsaWRlLXdpZHRoKSAqIC0xKTtcXG5cXG4gICAgJi5zbGlkZS1pbWFnZSB7XFxuICAgICAgLS10cmFuc2l0aW9uLXNwZWVkOiAuNXM7XFxuICAgICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIHZhcigtLXRyYW5zaXRpb24tc3BlZWQpIGN1YmljLWJlemllcigwLCAwLCAxLCAxKTtcXG4gICAgfVxcblxcbiAgICAmOmFmdGVyIHtcXG4gICAgICBjb250ZW50OiAnJztcXG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgd2lkdGg6IDEwMCU7XFxuICAgICAgaGVpZ2h0OiAxMDAlO1xcbiAgICAgIGxlZnQ6IHZhcigtLXNsaWRlLXdpZHRoKTtcXG4gICAgfVxcbiAgfVxcblxcbiAgJl9fc2xpZGUge1xcbiAgICBmbGV4OiAwIDAgdmFyKC0tc2xpZGUtd2lkdGgpOyAvLyB0aGUgZmxleCBiYXNpcyB2YWx1ZSBpcyBlcXVhbCB0byB0aGUgaW52ZXJzZSBvZiB0aGUgbGVmdCB2YWx1ZSBhYm92ZVxcbiAgICBwYWRkaW5nLXJpZ2h0OiAuNXJlbTtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG5cXG4gICAgaW1nIHtcXG4gICAgICB3aWR0aDogMTAwJTtcXG4gICAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIH1cXG4gIH1cXG5cXG4gICZfX2NvbnRyb2xzIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgfVxcblxcbiAgJl9fYnV0dG9uIHtcXG4gICAgYmFja2dyb3VuZDogc3RlZWxibHVlO1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCBzdGVlbGJsdWU7XFxuICAgIHBhZGRpbmc6IC41cmVtIC42MjVyZW07XFxuICAgIGNvbG9yOiAjZmZmO1xcbiAgICBmb250LXNpemU6IDFyZW07XFxuICAgIHRyYW5zaXRpb246IGFsbCAwLjI1cyBlYXNlO1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuXFxuICAgICYubGVmdCB7XFxuICAgICAgbGVmdDogNXB4O1xcbiAgICB9XFxuXFxuICAgICYucmlnaHQge1xcbiAgICAgIHJpZ2h0OiA1cHg7XFxuICAgIH1cXG5cXG4gICAgJjpob3ZlciB7XFxuICAgICAgY29sb3I6IHN0ZWVsYmx1ZTtcXG4gICAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcXG4gICAgICBib3JkZXI6IDFweCBzb2xpZCBzdGVlbGJsdWU7XFxuICAgIH1cXG4gIH1cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHRoaXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNbX2ldWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgbW9kdWxlcy5sZW5ndGg7IF9pMisrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19pMl0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgXCJcIikuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiLy8gTW9kdWxlXG52YXIgY29kZSA9IFwiPGRpdiBjbGFzcz1cXFwic2xpZGVyXFxcIj4gPGRpdiBjbGFzcz1cXFwic2xpZGVyX19zbGlkZXNcXFwiPjwvZGl2PiA8YnV0dG9uIGNsYXNzPVxcXCJzbGlkZXJfX2J1dHRvbiBsZWZ0XFxcIj4gPHN2ZyB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHdpZHRoPVxcXCIxNlxcXCIgaGVpZ2h0PVxcXCIxNlxcXCIgZmlsbD1cXFwiY3VycmVudENvbG9yXFxcIiBjbGFzcz1cXFwiYmkgYmktY2FyZXQtbGVmdC1maWxsXFxcIiB2aWV3Qm94PVxcXCIwIDAgMTYgMTZcXFwiPiA8cGF0aCBkPVxcXCJtMy44NiA4Ljc1MyA1LjQ4MiA0Ljc5NmMuNjQ2LjU2NiAxLjY1OC4xMDYgMS42NTgtLjc1M1YzLjIwNGExIDEgMCAwIDAtMS42NTktLjc1M2wtNS40OCA0Ljc5NmExIDEgMCAwIDAgMCAxLjUwNnpcXFwiLz4gPC9zdmc+IDwvYnV0dG9uPiA8YnV0dG9uIGNsYXNzPVxcXCJzbGlkZXJfX2J1dHRvbiByaWdodFxcXCI+IDxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB3aWR0aD1cXFwiMTZcXFwiIGhlaWdodD1cXFwiMTZcXFwiIGZpbGw9XFxcImN1cnJlbnRDb2xvclxcXCIgY2xhc3M9XFxcImJpIGJpLWNhcmV0LXJpZ2h0LWZpbGxcXFwiIHZpZXdCb3g9XFxcIjAgMCAxNiAxNlxcXCI+IDxwYXRoIGQ9XFxcIm0xMi4xNCA4Ljc1My01LjQ4MiA0Ljc5NmMtLjY0Ni41NjYtMS42NTguMTA2LTEuNjU4LS43NTNWMy4yMDRhMSAxIDAgMCAxIDEuNjU5LS43NTNsNS40OCA0Ljc5NmExIDEgMCAwIDEgMCAxLjUwNnpcXFwiLz4gPC9zdmc+IDwvYnV0dG9uPiA8L2Rpdj5cIjtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IGNvZGU7IiwiaW1wb3J0IGNzcyBmcm9tIFwiLi9zbGlkZXItaW1hZ2Uuc2Nzc1wiO1xuaW1wb3J0IGh0bWwgZnJvbSBcIi4vc2xpZGVyLWltYWdlLmh0bWxcIjtcblxuY29uc3QgdGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIik7XG50ZW1wbGF0ZS5pbm5lckhUTUwgPSBodG1sO1xuXG5jbGFzcyBTbGlkZXIgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gICAgLy8gc2xpZGVyIHdyYXBwZXIgZm9yIHRoZSBpbWFnZSBzbGlkZXNcbiAgICBzbGlkZXNXcmFwcGVyOiBIVE1MRGl2RWxlbWVudDtcblxuICAgIC8vIGNvbGxlY3Rpb24gb2YgaW1hZ2Ugc2xpZGVzIHdoaWNoIGNvbnRhaW4gdGhlIGltYWdlIGVsZW1lbnRzXG4gICAgc2xpZGVzOiBIVE1MRGl2RWxlbWVudFtdID0gW107XG5cbiAgICAvLyBjdXJyZW50IGZsZXggb3JkZXIgb2YgdGhlIGltYWdlIHNsaWRlc1xuICAgIGltYWdlT3JkZXI6IG51bWJlcltdID0gW11cblxuICAgIC8vIGlzIHNsaWRlciBtb3ZpbmcgbGVmdD9cbiAgICBpc1NsaWRpbmdMZWZ0OiBib29sZWFuID0gdHJ1ZTtcblxuICAgIC8vIGlzIGEgcG9pbnRlciBldmVudCBpbiBwcm9ncmVzc1xuICAgIGlzU2Nyb2xsaW5nOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvLyBzdG9yZXMgdGhlIGN1cnJlbnQgWCBwb3NpdGlvbiBvZiBhIHBvaW50ZXIgZXZlbnRcbiAgICBzdGFydDogbnVtYmVyID0gMDtcblxuICAgIC8vIGN1bXVsYXRpdmUgYW1vdW50IHNjcm9sbGVkIHNpbmNlIHRoZSBzdGFydCBvZiB0aGUgcG9pbnRlciBldmVudFxuICAgIHNjcm9sbGVkOiBudW1iZXIgPSAwO1xuXG4gICAgLy8gdGhlIGFjdHVhbCBpbWFnZSB3aWR0aCBzZXQgYnkgdGhlIENTUyBmbGV4IHByb3BlcnR5XG4gICAgc2xpZGVXaWR0aFB4OiBudW1iZXIgPSAwO1xuXG4gICAgc2hhZG93RE9NOiBTaGFkb3dSb290O1xuXG4gICAgc3R5bGVzaGVldDogQ1NTU3R5bGVTaGVldDtcblxuICAgIC8vIGF1dG9wbGF5IGZ1bmN0aW9uIGlzXG4gICAgYXV0b3BsYXk6ICgpID0+IE5vZGVKUy5UaW1lciB8IHZvaWQgPSAoKSA9PiB7XG4gICAgfTtcbiAgICBhdXRvUGxheUludGVydmFsSUQ/OiBOb2RlSlMuVGltZXIgfCBhbnk7XG5cbiAgICBzbGlkZXJCdXR0b25zOiBOb2RlTGlzdE9mPEhUTUxCdXR0b25FbGVtZW50PjtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmF0dGFjaFNoYWRvdyh7bW9kZTogXCJvcGVuXCJ9KTtcbiAgICAgICAgdGhpcy5zaGFkb3dET00gPSB0aGlzLnNoYWRvd1Jvb3QgYXMgU2hhZG93Um9vdDtcbiAgICAgICAgdGhpcy5zaGFkb3dET00uYXBwZW5kQ2hpbGQodGVtcGxhdGUuY29udGVudC5jbG9uZU5vZGUodHJ1ZSkpO1xuICAgICAgICB0aGlzLnN0eWxlc2hlZXQgPSB0aGlzLmFkZFN0eWxlU2hlZXQoKTtcbiAgICAgICAgdGhpcy5zbGlkZXNXcmFwcGVyID0gdGhpcy5zaGFkb3dET00ucXVlcnlTZWxlY3RvcihcIi5zbGlkZXJfX3NsaWRlc1wiKSBhcyBIVE1MRGl2RWxlbWVudDtcbiAgICAgICAgdGhpcy5zbGlkZXJCdXR0b25zID0gdGhpcy5zaGFkb3dET00ucXVlcnlTZWxlY3RvckFsbChcImJ1dHRvblwiKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuc2xpZGVzID0gdGhpcy5pbml0U2xpZGVzKCk7XG4gICAgICAgICAgICB0aGlzLnNsaWRlc1dyYXBwZXIuYXBwZW5kKC4uLnRoaXMuc2xpZGVzKTtcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VPcmRlciA9IHRoaXMuaW5pdFNsaWRlc0ZsZXhPcmRlcih0aGlzLnNsaWRlcyk7XG4gICAgICAgICAgICB0aGlzLnNldFNsaWRlc0ZsZXhPcmRlcigpO1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVVc2VyU2V0dGluZ3MoKTtcblxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYEltYWdlIExvYWRpbmcgRXJyb3I6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICB0aGlzLnNldEV2ZW50cygpO1xuICAgICAgICB0aGlzLmhpZGRlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNsaWRlV2lkdGhQeCA9IHRoaXMuc2xpZGVzWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xuICAgIH1cblxuICAgIGluaXRTbGlkZXMoKTogSFRNTERpdkVsZW1lbnRbXSB7XG4gICAgICAgIGNvbnN0IHNsb3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2xvdFwiKTtcbiAgICAgICAgc2xvdC5uYW1lID0gXCJzbGlkZVwiO1xuICAgICAgICB0aGlzLnNoYWRvd0RPTS5hcHBlbmQoc2xvdCk7XG4gICAgICAgIGlmICghc2xvdC5hc3NpZ25lZE5vZGVzKCkubGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoXCJObyBwcm9wZXJseSBmb3JtYXR0ZWQgaW1hZ2VzIGZvdW5kXCIpXG4gICAgICAgIGNvbnN0IHNsaWRlczogSFRNTERpdkVsZW1lbnRbXSA9IEFycmF5LmZyb20oe2xlbmd0aDogc2xvdC5hc3NpZ25lZE5vZGVzKCkubGVuZ3RoICogMn0pO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBzbGlkZXMubGVuZ3RoIC8gMiAtIDE7IGkrKykge1xuICAgICAgICAgICAgbGV0IFtpbWFnZV0gPSBzbG90LmFzc2lnbmVkTm9kZXMoKTtcbiAgICAgICAgICAgIGNvbnN0IHNsaWRlV3JhcHBlcjogSFRNTERpdkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgc2xpZGVXcmFwcGVyLmNsYXNzTGlzdC5hZGQoXCJzbGlkZXJfX3NsaWRlXCIpO1xuICAgICAgICAgICAgc2xpZGVXcmFwcGVyLmFwcGVuZChpbWFnZSk7XG4gICAgICAgICAgICBzbGlkZXNbaV0gPSBzbGlkZVdyYXBwZXI7XG4gICAgICAgICAgICBzbGlkZXNbaSArIHNsaWRlcy5sZW5ndGggLyAyXSA9IHNsaWRlV3JhcHBlci5jbG9uZU5vZGUodHJ1ZSkgYXMgSFRNTERpdkVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNsaWRlcztcbiAgICB9XG5cbiAgICBpbml0QXV0b1BsYXkoKSB7XG4gICAgICAgIGNvbnN0IG1vZGUgPSB0aGlzLmdldEF0dHJpYnV0ZShcImF1dG8tcGxheS1tb2RlXCIpO1xuICAgICAgICBjb25zdCBbbGVmdEJ0biwgcmlnaHRCdG5dID0gdGhpcy5zbGlkZXJCdXR0b25zO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgc3dpdGNoIChtb2RlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcImNyYXdsXCI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2xpZGVzV3JhcHBlci5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcmRvd25cIiwgdGhpcy5oYW5kbGVQb2ludGVyRG93bik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2xpZGVzV3JhcHBlci5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcm1vdmVcIiwgdGhpcy5oYW5kbGVQb2ludGVyTW92ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2xpZGVzV3JhcHBlci5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcnVwXCIsIHRoaXMuaGFuZGxlUG9pbnRlclVwKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3Jhd2xUaW1pbmcgPSB0aGlzLmdldEF0dHJpYnV0ZShcImNyYXdsLXRpbWluZ1wiKVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBERUZBVUxUX0NSQVdMVElNSU5HID0gNjAwMDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdHlsZXNoZWV0Lmluc2VydFJ1bGUoYC5zbGlkZXJfX3NsaWRlcy5zbGlkZS1pbWFnZXstLXRyYW5zaXRpb24tc3BlZWQ6JHtjcmF3bFRpbWluZyB8fCBERUZBVUxUX0NSQVdMVElNSU5HfW1zYCwgdGhpcy5zdHlsZXNoZWV0LmNzc1J1bGVzLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3R5bGVzaGVldC5pbnNlcnRSdWxlKGAuc2xpZGVyOmhvdmVye2N1cnNvcjpkZWZhdWx0fWAsIHRoaXMuc3R5bGVzaGVldC5jc3NSdWxlcy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pc1NsaWRpbmdMZWZ0ID8gbGVmdEJ0bi5jbGljaygpIDogcmlnaHRCdG4uY2xpY2soKTtcbiAgICAgICAgICAgICAgICBjYXNlIFwic3RlcFwiOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hdXRvUGxheUludGVydmFsSUQpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW50ZXJ2YWwgPSB0aGlzLmdldEF0dHJpYnV0ZShcInN0ZXAtdGltaW5nXCIpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBERUZBVUxUX0lOVEVSVkFMID0gMjAwMFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hdXRvUGxheUludGVydmFsSUQgPSBzZXRJbnRlcnZhbCgoKSA9PiB0aGlzLmlzU2xpZGluZ0xlZnQgPyBsZWZ0QnRuLmNsaWNrKCkgOiByaWdodEJ0bi5jbGljaygpLCBOdW1iZXIoaW50ZXJ2YWwpIHx8IERFRkFVTFRfSU5URVJWQUwpXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkaXNhYmxlU3RlcEludGVydmFsKCkge1xuICAgICAgICBjbGVhckludGVydmFsKHRoaXMuYXV0b1BsYXlJbnRlcnZhbElEKTtcbiAgICAgICAgdGhpcy5hdXRvUGxheUludGVydmFsSUQgPSBudWxsO1xuICAgIH1cblxuICAgIGFkZFN0eWxlU2hlZXQoKTogQ1NTU3R5bGVTaGVldCB7XG4gICAgICAgIGNvbnN0IHN0eWxlczogSFRNTFN0eWxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgICAgICAgc3R5bGVzLnRleHRDb250ZW50ID0gY3NzO1xuICAgICAgICB0aGlzLnNoYWRvd0RPTS5hcHBlbmQoc3R5bGVzKTtcbiAgICAgICAgcmV0dXJuIHN0eWxlcy5zaGVldCE7XG4gICAgfVxuXG4gICAgaGFuZGxlVXNlclNldHRpbmdzKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmF1dG9wbGF5ID0gdGhpcy5pbml0QXV0b1BsYXkoKTtcbiAgICAgICAgLy8gdGhpcy5zZXRNYXhXaWR0aCgpO1xuICAgICAgICAvLyB0aGlzLnNldE51bVNsaWRlcygpO1xuICAgICAgICB0aGlzLmhhc0F0dHJpYnV0ZShcImhpZGUtY29udHJvbHNcIikgJiYgdGhpcy5zbGlkZXJCdXR0b25zLmZvckVhY2goYnRuID0+IGJ0bi5oaWRkZW4gPSB0cnVlKTtcbiAgICB9XG5cbiAgICBzZXRNYXhXaWR0aCgpe1xuICAgICAgICBjb25zdCBtYXhXaWR0aCA9IHRoaXMuZ2V0QXR0cmlidXRlKFwibWF4LXdpZHRoXCIpO1xuICAgICAgICBpZiAoIW1heFdpZHRoKSByZXR1cm47XG4gICAgICAgIHRoaXMuc3R5bGVzaGVldC5pbnNlcnRSdWxlKGAuc2xpZGVyey0tbWF4LXdpZHRoOiR7bWF4V2lkdGh9fWAsIHRoaXMuc3R5bGVzaGVldC5jc3NSdWxlcy5sZW5ndGgpO1xuICAgIH1cblxuICAgIHNldE51bVNsaWRlcygpIHtcbiAgICAgICAgY29uc3QgbnVtU2xpZGVzID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJudW0tc2xpZGVzXCIpO1xuICAgICAgICBpZiAoIW51bVNsaWRlcykgcmV0dXJuO1xuICAgICAgICAvLyB0aGlzLnN0eWxlc2hlZXQuaW5zZXJ0UnVsZShgLnNsaWRlcl9fc2xpZGVzey0tc2xpZGUtd2lkdGg6JHt0aGlzLnNldFNsaWRlV2lkdGhQZXJjZW50KCtudW1TbGlkZXMpfSVgLCB0aGlzLnN0eWxlc2hlZXQuY3NzUnVsZXMubGVuZ3RoKTtcbiAgICB9XG5cbiAgICBzZXRTbGlkZVdpZHRoUGVyY2VudChudW1TbGlkZXM6IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgcmV0dXJuIE1hdGguZmxvb3IoMTAwIC8gbnVtU2xpZGVzICogLjk1KVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCBhbGwgdGhlIGV2ZW50IGxpc3RlbmVyc1xuICAgICAqIGFsbCB0aGUgZXZlbnQgaGFuZGxlciBtZXRob2RzIGhhdmUgYmVlbiBkZWZpbmVkIHVzaW5nIGZ1bmN0aW9uIGV4cHJlc3Npb24gc3ludGF4IHRvIGF2b2lkIHRoZSBuZWVkIGZvciAuYmluZCh0aGlzKSBoZXJlXG4gICAgICovXG4gICAgc2V0RXZlbnRzKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnNsaWRlckJ1dHRvbnMuZm9yRWFjaChidG4gPT4gYnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmhhbmRsZUNsaWNrKSk7XG4gICAgICAgIHRoaXMuc2xpZGVzV3JhcHBlci5hZGRFdmVudExpc3RlbmVyKFwidHJhbnNpdGlvbmVuZFwiLCB0aGlzLnJlb3JkZXJTbGlkZXMpO1xuICAgICAgICB0aGlzLnNsaWRlc1dyYXBwZXIuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJkb3duXCIsIHRoaXMuaGFuZGxlUG9pbnRlckRvd24pO1xuICAgICAgICB0aGlzLnNsaWRlc1dyYXBwZXIuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJtb3ZlXCIsIHRoaXMuaGFuZGxlUG9pbnRlck1vdmUpO1xuICAgICAgICB0aGlzLnNsaWRlc1dyYXBwZXIuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJ1cFwiLCB0aGlzLmhhbmRsZVBvaW50ZXJVcCk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCB0aGlzLmF1dG9wbGF5KTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgKCkgPT4gKHRoaXMuc2xpZGVXaWR0aFB4ID0gdGhpcy5zbGlkZXNbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW5kIHBvcHVsYXRlIGFuIGFycmF5IHdpdGggZWFjaCBzbGlkZSdzIGluZGV4LCBzbGlkZXN3cmFwcGVyIGlzIG9mZnNldCBsZWZ0IGJ5IG9uZSBzbGlkZSwgdGhpcyBtZXRob2QgbWFrZXMgdGhlIGxhc3Qgc2xpZGUgZmlyc3QgdG8gY291bnRlciB0aGUgZWZmZWN0XG4gICAgICogQHBhcmFtIHNsaWRlTGlzdFxuICAgICAqL1xuICAgIGluaXRTbGlkZXNGbGV4T3JkZXIoc2xpZGVMaXN0OiBFbGVtZW50W10pOiBudW1iZXJbXSB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHtsZW5ndGg6IHNsaWRlTGlzdC5sZW5ndGh9LCAoZWwsIGkpID0+IChpICsgMSkgJSBzbGlkZUxpc3QubGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjYWxsZWQgYXMgZWl0aGVyIHRoZSB0cmFuc2l0aW9uZW5kIGhhbmRsZXIgb3IgbWFudWFsbHkgd2hlbiB0aGlzLnNjcm9sbGVkIC8gdGhpcy5pbWFnZVdpZHRoID4gMVxuICAgICAqL1xuICAgIHJlb3JkZXJTbGlkZXMgPSAoKTogdm9pZCB8IG51bWJlciA9PiB7XG4gICAgICAgIHRoaXMuc2xpZGVzV3JhcHBlci5jbGFzc0xpc3QucmVtb3ZlKFwic2xpZGUtaW1hZ2VcIik7XG4gICAgICAgIGlmIChNYXRoLmFicyh0aGlzLnNjcm9sbGVkKSA+IDApIHJldHVybiAodGhpcy5zY3JvbGxlZCA9IDApO1xuICAgICAgICAvLyB1c2luZyBsZW5ndGggcHJldmVudHMgYSBuZWdhdGl2ZSBudW1iZXIgaW4gdGhlIHN1YnNlcXVlbnQgbW9kdWxvIGNhbGxcbiAgICAgICAgbGV0IG9mZnNldCA9IHRoaXMuaXNTbGlkaW5nTGVmdCA/IHRoaXMuc2xpZGVzLmxlbmd0aCAtIDEgOiAxO1xuICAgICAgICB0aGlzLnNldFNsaWRlc0ZsZXhPcmRlcihvZmZzZXQpO1xuICAgICAgICB0aGlzLnNsaWRlUmVzZXQoKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLmF1dG9wbGF5KCksMCk7XG4gICAgfTtcblxuICAgIHNldFNsaWRlc0ZsZXhPcmRlcihvZmZzZXQ6IG51bWJlciA9IDApOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zbGlkZXMuZm9yRWFjaCgoc2xpZGUsIGkpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VPcmRlcltpXSA9ICh0aGlzLmltYWdlT3JkZXJbaV0gKyBvZmZzZXQpICUgdGhpcy5zbGlkZXMubGVuZ3RoO1xuICAgICAgICAgICAgc2xpZGUuc3R5bGUub3JkZXIgPSB0aGlzLmltYWdlT3JkZXJbaV0udG9TdHJpbmcoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdGFyZ2V0ZWQgZGlyZWN0aW9uLCBhZGRzIENTUyBjbGFzcyBmb3Igc21vb3RoIHRyYW5zaXRpb24gYW5kIGNhbGxzIHRoZSBzY3JvbGwgZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0gZSBFdmVudFxuICAgICAqL1xuICAgIGhhbmRsZUNsaWNrID0gKGU6IE1vdXNlRXZlbnQpOiB2b2lkID0+IHtcbiAgICAgICAgY29uc3QgYnV0dG9uID0gZS5jdXJyZW50VGFyZ2V0IGFzIEhUTUxCdXR0b25FbGVtZW50O1xuICAgICAgICB0aGlzLmlzU2xpZGluZ0xlZnQgPSBidXR0b24uY2xhc3NMaXN0LmNvbnRhaW5zKFwibGVmdFwiKTtcbiAgICAgICAgdGhpcy5zbGlkZXNXcmFwcGVyLmNsYXNzTGlzdC5hZGQoXCJzbGlkZS1pbWFnZVwiKTtcbiAgICAgICAgdGhpcy5zbGlkZVgoKTtcbiAgICB9O1xuXG4gICAgaGFuZGxlUG9pbnRlckRvd24gPSAoZTogUG9pbnRlckV2ZW50KTogdm9pZCA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgY29uc3QgY3VycmVudFRhcmdldCA9IGUuY3VycmVudFRhcmdldCBhcyBIVE1MRGl2RWxlbWVudDtcbiAgICAgICAgLy8gc2hvd3MgdGhlIGdyYWIgY3Vyc29yIGZvciBtb3VzZWV2ZW50cyB1bnRpbCB0aGUgcG9pbnRlcnVwIGV2ZW50IGlzIGNhbGxlZFxuICAgICAgICBjdXJyZW50VGFyZ2V0LnNldFBvaW50ZXJDYXB0dXJlKGUucG9pbnRlcklkKTtcbiAgICAgICAgY3VycmVudFRhcmdldC5zdHlsZS5jdXJzb3IgPSBcImdyYWJiaW5nXCI7XG4gICAgICAgIHRoaXMuaXNTY3JvbGxpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLnN0YXJ0ID0gZS5jbGllbnRYO1xuICAgICAgICB0aGlzLmRpc2FibGVTdGVwSW50ZXJ2YWwoKTtcbiAgICB9O1xuXG4gICAgaGFuZGxlUG9pbnRlck1vdmUgPSAoZTogUG9pbnRlckV2ZW50KTogdm9pZCA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgaWYgKCF0aGlzLmlzU2Nyb2xsaW5nKSByZXR1cm47XG4gICAgICAgIHRoaXMuc2Nyb2xsZWQgPSBlLmNsaWVudFggLSB0aGlzLnN0YXJ0O1xuICAgICAgICB0aGlzLmlzU2xpZGluZ0xlZnQgPSB0aGlzLnNjcm9sbGVkIDwgMDtcbiAgICAgICAgdGhpcy5zbGlkZVgoKTtcbiAgICAgICAgaWYgKE1hdGguYWJzKHRoaXMuc2Nyb2xsZWQgLyB0aGlzLnNsaWRlV2lkdGhQeCkgPiAxKSB7XG4gICAgICAgICAgICB0aGlzLnNjcm9sbGVkID0gMDtcbiAgICAgICAgICAgIHRoaXMucmVvcmRlclNsaWRlcygpO1xuICAgICAgICAgICAgdGhpcy5zdGFydCA9IGUuY2xpZW50WDtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBoYW5kbGVQb2ludGVyVXAgPSAoZTogUG9pbnRlckV2ZW50KTogdm9pZCA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5zbGlkZXNXcmFwcGVyLmNsYXNzTGlzdC5hZGQoXCJzbGlkZS1pbWFnZVwiKTtcbiAgICAgICAgaWYgKE1hdGguYWJzKHRoaXMuc2Nyb2xsZWQgLyB0aGlzLnNsaWRlV2lkdGhQeCkgPiAwLjUpIHtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsZWQgPSAwO1xuICAgICAgICAgICAgdGhpcy5zbGlkZVgoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2xpZGVSZXNldCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXNTY3JvbGxpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5hdXRvcGxheSgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBcHBseSB0cmFuc2xhdGVYIGJ5IGVpdGhlciB0aGUgYW1vdW50IHNjcm9sbGVkIGJ5IHRoZSB1c2VyIG9yLCBpZiB0aGlzLnNjcm9sbGVkID0gMCAoZmFsc3kgd2hlbiBjbGljayBldmVudCBvciBkdXJpbmcgcG9pbnRlcnVwKSBieSB0aGUgY3VycmVudCB3aWR0aCBvZiBhIHNsaWRlXG4gICAgICovXG4gICAgc2xpZGVYID0gKCk6IHN0cmluZyA9PiB0aGlzLnNsaWRlc1dyYXBwZXIuc3R5bGUudHJhbnNmb3JtID0gdGhpcy5zY3JvbGxlZCA/IGB0cmFuc2xhdGVYKCR7dGhpcy5zY3JvbGxlZH1weClgIDogYHRyYW5zbGF0ZVgoJHsodGhpcy5pc1NsaWRpbmdMZWZ0ID8gLTEgOiAxKSAqIHRoaXMuc2xpZGVXaWR0aFB4fXB4KWA7XG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2xhdGVYIGJhY2sgdG8gemVyb1xuICAgICAqL1xuICAgIHNsaWRlUmVzZXQgPSAoKTogc3RyaW5nID0+IHRoaXMuc2xpZGVzV3JhcHBlci5zdHlsZS50cmFuc2Zvcm0gPSBcInRyYW5zbGF0ZVgoMClcIjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgU2xpZGVyO1xuXG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiaW1wb3J0IFNsaWRlciBmcm9tIFwiLi9zbGlkZXItaW1hZ2VcIjtcbmN1c3RvbUVsZW1lbnRzLmRlZmluZShcImltYWdlLXNsaWRlclwiLCBTbGlkZXIpOyJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsIl9pIiwiX2kyIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsInRlbXBsYXRlIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJIVE1MIiwiU2xpZGVyIiwiSFRNTEVsZW1lbnQiLCJjb25zdHJ1Y3RvciIsInN1cGVyIiwic2xpZGVzIiwiaW1hZ2VPcmRlciIsImlzU2xpZGluZ0xlZnQiLCJpc1Njcm9sbGluZyIsInN0YXJ0Iiwic2Nyb2xsZWQiLCJzbGlkZVdpZHRoUHgiLCJhdXRvcGxheSIsInJlb3JkZXJTbGlkZXMiLCJzbGlkZXNXcmFwcGVyIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwiTWF0aCIsImFicyIsIm9mZnNldCIsInNldFNsaWRlc0ZsZXhPcmRlciIsInNsaWRlUmVzZXQiLCJzZXRUaW1lb3V0IiwiaGFuZGxlQ2xpY2siLCJlIiwiYnV0dG9uIiwiY3VycmVudFRhcmdldCIsImNvbnRhaW5zIiwiYWRkIiwic2xpZGVYIiwiaGFuZGxlUG9pbnRlckRvd24iLCJwcmV2ZW50RGVmYXVsdCIsInNldFBvaW50ZXJDYXB0dXJlIiwicG9pbnRlcklkIiwic3R5bGUiLCJjdXJzb3IiLCJjbGllbnRYIiwiZGlzYWJsZVN0ZXBJbnRlcnZhbCIsImhhbmRsZVBvaW50ZXJNb3ZlIiwiaGFuZGxlUG9pbnRlclVwIiwidHJhbnNmb3JtIiwiYXR0YWNoU2hhZG93IiwibW9kZSIsInNoYWRvd0RPTSIsInNoYWRvd1Jvb3QiLCJhcHBlbmRDaGlsZCIsImNsb25lTm9kZSIsInN0eWxlc2hlZXQiLCJhZGRTdHlsZVNoZWV0IiwicXVlcnlTZWxlY3RvciIsInNsaWRlckJ1dHRvbnMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaW5pdFNsaWRlcyIsImFwcGVuZCIsImluaXRTbGlkZXNGbGV4T3JkZXIiLCJoYW5kbGVVc2VyU2V0dGluZ3MiLCJlcnJvciIsIkVycm9yIiwiY29uc29sZSIsImxvZyIsIm1lc3NhZ2UiLCJjb25uZWN0ZWRDYWxsYmFjayIsInNldEV2ZW50cyIsImhpZGRlbiIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIndpZHRoIiwic2xvdCIsIm5hbWUiLCJhc3NpZ25lZE5vZGVzIiwiQXJyYXkiLCJmcm9tIiwiaW1hZ2UiLCJzbGlkZVdyYXBwZXIiLCJpbml0QXV0b1BsYXkiLCJnZXRBdHRyaWJ1dGUiLCJsZWZ0QnRuIiwicmlnaHRCdG4iLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY3Jhd2xUaW1pbmciLCJERUZBVUxUX0NSQVdMVElNSU5HIiwiaW5zZXJ0UnVsZSIsImNzc1J1bGVzIiwiY2xpY2siLCJhdXRvUGxheUludGVydmFsSUQiLCJpbnRlcnZhbCIsIkRFRkFVTFRfSU5URVJWQUwiLCJzZXRJbnRlcnZhbCIsIk51bWJlciIsImNsZWFySW50ZXJ2YWwiLCJzdHlsZXMiLCJ0ZXh0Q29udGVudCIsInNoZWV0IiwiaGFzQXR0cmlidXRlIiwiZm9yRWFjaCIsImJ0biIsInNldE1heFdpZHRoIiwibWF4V2lkdGgiLCJzZXROdW1TbGlkZXMiLCJzZXRTbGlkZVdpZHRoUGVyY2VudCIsIm51bVNsaWRlcyIsImZsb29yIiwiYWRkRXZlbnRMaXN0ZW5lciIsIndpbmRvdyIsInNsaWRlTGlzdCIsImVsIiwic2xpZGUiLCJvcmRlciIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJjdXN0b21FbGVtZW50cyIsImRlZmluZSJdLCJzb3VyY2VSb290IjoiIn0=