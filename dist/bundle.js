(()=>{"use strict";var t={819:(t,e,i)=>{i.r(e),i.d(e,{default:()=>o});var s=i(537),n=i.n(s),r=i(645),l=i.n(r)()(n());l.push([t.id,'.slider{--slide-width: 31.35%;--max-width: 100%;max-width:var(--max-width);overflow:hidden;margin:0 auto;touch-action:none;display:flex;align-items:center;position:relative}.slider:hover{cursor:grab}.slider__slides{display:flex;position:relative;left:calc(var(--slide-width)*-1)}.slider__slides.slide-image{--transition-speed: .5s;transition:transform var(--transition-speed) cubic-bezier(0, 0, 1, 1)}.slider__slides:after{content:"";position:absolute;width:100%;height:100%;left:var(--slide-width)}.slider__slide{flex:0 0 var(--slide-width);padding-right:.5rem;box-sizing:border-box;display:grid;place-content:center}.slider__slide img{width:100%;height:100%}.slider__controls{display:flex;position:absolute;justify-content:space-between;width:100%}.slider__button{background:#4682b4;border:1px solid #4682b4;padding:.5rem .625rem;color:#fff;font-size:1rem;transition:all .25s ease;position:absolute}.slider__button.left{left:5px}.slider__button.right{right:5px}.slider__button:hover{color:#4682b4;background:#fff;border:1px solid #4682b4}',"",{version:3,sources:["webpack://./src/slider-image.scss"],names:[],mappings:"AAAA,QACE,qBAAA,CACA,iBAAA,CACA,0BAAA,CACA,eAAA,CACA,aAAA,CACA,iBAAA,CACA,YAAA,CACA,kBAAA,CACA,iBAAA,CAEA,cACE,WAAA,CAGF,gBACE,YAAA,CACA,iBAAA,CACA,gCAAA,CACA,4BACE,uBAAA,CACA,qEAAA,CAEF,sBACE,UAAA,CACA,iBAAA,CACA,UAAA,CACA,WAAA,CACA,uBAAA,CAIJ,eACE,2BAAA,CACA,mBAAA,CACA,qBAAA,CACA,YAAA,CACA,oBAAA,CAEA,mBACE,UAAA,CACA,WAAA,CAIJ,kBACE,YAAA,CACA,iBAAA,CACA,6BAAA,CACA,UAAA,CAGF,gBACE,kBAAA,CACA,wBAAA,CACA,qBAAA,CACA,UAAA,CACA,cAAA,CACA,wBAAA,CACA,iBAAA,CACA,qBACE,QAAA,CAEF,sBACE,SAAA,CAGF,sBACE,aAAA,CACA,eAAA,CACA,wBAAA",sourcesContent:[".slider {\n  --slide-width: 31.35%; // divide 100 by # of slides and subtract 5%\n  --max-width: 100%;\n  max-width: var(--max-width);\n  overflow: hidden;\n  margin: 0 auto;\n  touch-action: none;\n  display: flex;\n  align-items: center;\n  position: relative;\n\n  &:hover {\n    cursor: grab;\n  }\n\n  &__slides {\n    display: flex;\n    position: relative;\n    left: calc(var(--slide-width) * -1);\n    &.slide-image {\n      --transition-speed: .5s;\n      transition: transform var(--transition-speed) cubic-bezier(0, 0, 1, 1);\n    }\n    &:after {\n      content: '';\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      left: var(--slide-width);\n    }\n  }\n\n  &__slide {\n    flex: 0 0 var(--slide-width); // the flex basis value is equal to the inverse of the left value above\n    padding-right: .5rem;\n    box-sizing: border-box;\n    display: grid;\n    place-content: center;\n\n    img {\n      width: 100%;\n      height: 100%;\n    }\n  }\n\n  &__controls {\n    display: flex;\n    position: absolute;\n    justify-content: space-between;\n    width: 100%;\n  }\n\n  &__button {\n    background: steelblue;\n    border: 1px solid steelblue;\n    padding: .5rem .625rem;\n    color: #fff;\n    font-size: 1rem;\n    transition: all 0.25s ease;\n    position: absolute;\n    &.left {\n      left: 5px;\n    }\n    &.right {\n      right: 5px;\n    }\n\n    &:hover {\n      color: steelblue;\n      background: white;\n      border: 1px solid steelblue;\n    }\n  }\n}\n"],sourceRoot:""}]);const o=l},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i="",s=void 0!==e[5];return e[4]&&(i+="@supports (".concat(e[4],") {")),e[2]&&(i+="@media ".concat(e[2]," {")),s&&(i+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),i+=t(e),s&&(i+="}"),e[2]&&(i+="}"),e[4]&&(i+="}"),i})).join("")},e.i=function(t,i,s,n,r){"string"==typeof t&&(t=[[null,t,void 0]]);var l={};if(s)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(l[a]=!0)}for(var d=0;d<t.length;d++){var h=[].concat(t[d]);s&&l[h[0]]||(void 0!==r&&(void 0===h[5]||(h[1]="@layer".concat(h[5].length>0?" ".concat(h[5]):""," {").concat(h[1],"}")),h[5]=r),i&&(h[2]?(h[1]="@media ".concat(h[2]," {").concat(h[1],"}"),h[2]=i):h[2]=i),n&&(h[4]?(h[1]="@supports (".concat(h[4],") {").concat(h[1],"}"),h[4]=n):h[4]="".concat(n)),e.push(h))}},e}},537:t=>{t.exports=function(t){var e=t[1],i=t[3];if(!i)return e;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),n="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),r="/*# ".concat(n," */"),l=i.sources.map((function(t){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(t," */")}));return[e].concat(l).concat([r]).join("\n")}return[e].join("\n")}},306:(t,e,i)=>{i.r(e),i.d(e,{default:()=>s});const s='<div class="slider"> <div class="slider__slides"></div> <button class="slider__button left"> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-caret-left-fill" viewBox="0 0 16 16"> <path d="m3.86 8.753 5.482 4.796c.646.566 1.658.106 1.658-.753V3.204a1 1 0 0 0-1.659-.753l-5.48 4.796a1 1 0 0 0 0 1.506z"/> </svg> </button> <button class="slider__button right"> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-caret-right-fill" viewBox="0 0 16 16"> <path d="m12.14 8.753-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z"/> </svg> </button> </div>'},811:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});const s=i(819),n=i(306);class r extends HTMLElement{constructor(){super(),this.slides=[],this.imageOrder=[],this.isSlidingLeft=!0,this.isScrolling=!1,this.start=0,this.scrolled=0,this.slideWidthPx=0,this.settings={autoplayStepTiming:2e3,autoplayCrawlTiming:6e3,numSlides:3,hideControls:!1},this.autoplay=()=>{},this.handleClick=t=>{const e=t.currentTarget;this.isSlidingLeft=e.classList.contains("left"),this.slidesWrapper.classList.add("slide-image"),this.slideX()},this.reorderSlides=()=>{if(this.slidesWrapper.classList.remove("slide-image"),Math.abs(this.scrolled)>0)return this.scrolled=0;let t=this.isSlidingLeft?this.slides.length-1:1;this.setSlidesFlexOrder(t),this.slideReset(),"crawl"===this.settings.autoplayMode&&setTimeout((()=>this.autoplay()))},this.handlePointerDown=t=>{t.preventDefault();const e=t.currentTarget;e.setPointerCapture(t.pointerId),e.style.cursor="grabbing",this.isScrolling=!0,this.start=t.clientX,this.clearAutoPlay(this.autoPlayIntervalID)},this.handlePointerMove=t=>{t.preventDefault(),this.isScrolling&&(this.scrolled=t.clientX-this.start,this.isSlidingLeft=this.scrolled<0,this.slideX(),Math.abs(this.scrolled/this.slideWidthPx)>1&&(this.scrolled=0,this.reorderSlides(),this.start=t.clientX))},this.handlePointerUp=t=>{t.preventDefault(),this.slidesWrapper.classList.add("slide-image"),Math.abs(this.scrolled/this.slideWidthPx)>.5?(this.scrolled=0,this.slideX()):this.slideReset(),this.isScrolling=!1,this.autoplay()},this.slideX=()=>this.slidesWrapper.style.transform=this.scrolled?`translateX(${this.scrolled}px)`:`translateX(${(this.isSlidingLeft?-1:1)*this.slideWidthPx}px)`,this.slideReset=()=>this.slidesWrapper.style.transform="translateX(0)",this.settings=Object.assign(Object.assign({},this.settings),this.dataset),this.attachShadow({mode:"open"}),this.shadowDOM=this.shadowRoot,this.shadowDOM.innerHTML=n.default,this.addStyleSheet(),this.slidesWrapper=this.shadowDOM.querySelector(".slider__slides"),this.sliderButtons=this.shadowDOM.querySelectorAll("button");try{this.slides=this.initSlides(),this.slidesWrapper.append(...this.slides),this.imageOrder=this.initSlidesFlexOrder(this.slides),this.setSlidesFlexOrder(),this.handleUserSettings(),this.setEvents()}catch(t){t instanceof Error&&console.log(t.message)}}initAutoPlay(t){const{autoplayMode:e,autoplayStepTiming:i}=t,[s,n]=this.sliderButtons;return()=>{switch(e){case"crawl":return this.slidesWrapper.removeEventListener("pointerdown",this.handlePointerDown),this.slidesWrapper.removeEventListener("pointermove",this.handlePointerMove),this.slidesWrapper.removeEventListener("pointerup",this.handlePointerUp),this.isSlidingLeft?s.click():null==n?void 0:n.click();case"step":return this.autoPlayIntervalID=setInterval((()=>this.isSlidingLeft?s.click():null==n?void 0:n.click()),i)}}}clearAutoPlay(t){return clearInterval(t)}initSlides(){var t;const e=null===(t=document.getElementById("images-map"))||void 0===t?void 0:t.textContent;if(!e)throw new Error("No images were provided.");const i=JSON.parse(e),s=[];for(let t=0;t<i.length;t++){const e=document.createElement("div");e.classList.add("slider__slide");const n=document.createElement("img");n.src=i[t].src,n.alt=i[t].alt,n.onload=()=>{n.width=n.naturalWidth,n.height=n.naturalHeight,this.slideWidthPx=this.slides[0].getBoundingClientRect().width},e.append(n),s[t]=e,s[t+i.length]=e.cloneNode(!0)}return s}addStyleSheet(){const t=document.createElement("style");t.textContent=s.default,this.shadowDOM.append(t)}handleUserSettings(){this.autoplay=this.initAutoPlay(this.settings);const t=document.createElement("style");this.shadowDOM.append(t);const e=t.sheet;this.settings.maxWidth&&(null==e||e.insertRule(`.slider{--max-width:${this.settings.maxWidth}}`)),this.settings.numSlides&&(null==e||e.insertRule(`.slider{--slide-width:${Math.floor(100/+this.settings.numSlides*.95)}%}`)),this.settings.hideControls&&this.sliderButtons.forEach((t=>t.hidden=!0)),"crawl"===this.settings.autoplayMode&&(null==e||e.insertRule(`.slider__slides.slide-image{--transition-speed:${this.settings.autoplayCrawlTiming}ms`),null==e||e.insertRule(".slider:hover{cursor:default}"))}setEvents(){this.sliderButtons.forEach((t=>t.addEventListener("click",this.handleClick))),this.slidesWrapper.addEventListener("transitionend",this.reorderSlides),this.slidesWrapper.addEventListener("pointerdown",this.handlePointerDown),this.slidesWrapper.addEventListener("pointermove",this.handlePointerMove),this.slidesWrapper.addEventListener("pointerup",this.handlePointerUp),window.onload=this.autoplay,window.addEventListener("resize",(()=>this.slideWidthPx=this.slides[0].getBoundingClientRect().width))}initSlidesFlexOrder(t){return Array.from({length:t.length},((e,i)=>(i+1)%t.length))}setSlidesFlexOrder(t=0){this.slides.forEach(((e,i)=>{this.imageOrder[i]=(this.imageOrder[i]+t)%this.slides.length,e.style.order=this.imageOrder[i].toString()}))}}e.default=r}},e={};function i(s){var n=e[s];if(void 0!==n)return n.exports;var r=e[s]={id:s,exports:{}};return t[s](r,r.exports,i),r.exports}i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var s in e)i.o(e,s)&&!i.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{const t=i(811);customElements.define("image-slider",t.default)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,