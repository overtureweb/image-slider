(()=>{"use strict";var e={819:(e,t,i)=>{i.r(t),i.d(t,{default:()=>o});var s=i(537),n=i.n(s),r=i(645),l=i.n(r)()(n());l.push([e.id,'.slider{--slide-width: 31.35%;--max-width: 100%;max-width:var(--max-width);overflow:hidden;margin:0 auto;touch-action:none;display:flex;align-items:center;position:relative}.slider:hover{cursor:grab}.slider__slides{display:flex;position:relative;left:calc(var(--slide-width)*-1)}.slider__slides.slide-image{--transition-speed: .5s;transition:transform var(--transition-speed) cubic-bezier(0, 0, 1, 1)}.slider__slides:after{content:"";position:absolute;width:100%;height:100%;left:var(--slide-width)}.slider__slide{flex:0 0 var(--slide-width);padding-right:.5rem;box-sizing:border-box;display:grid;place-content:center}.slider__slide img{width:100%;height:100%}.slider__controls{display:flex;position:absolute;justify-content:space-between;width:100%}.slider__button{background:#4682b4;border:1px solid #4682b4;padding:.5rem .625rem;color:#fff;font-size:1rem;transition:all .25s ease;position:absolute}.slider__button.left{left:5px}.slider__button.right{right:5px}.slider__button:hover{color:#4682b4;background:#fff;border:1px solid #4682b4}',"",{version:3,sources:["webpack://./src/slider-image.scss"],names:[],mappings:"AAAA,QACE,qBAAA,CACA,iBAAA,CACA,0BAAA,CACA,eAAA,CACA,aAAA,CACA,iBAAA,CACA,YAAA,CACA,kBAAA,CACA,iBAAA,CAEA,cACE,WAAA,CAGF,gBACE,YAAA,CACA,iBAAA,CACA,gCAAA,CACA,4BACE,uBAAA,CACA,qEAAA,CAEF,sBACE,UAAA,CACA,iBAAA,CACA,UAAA,CACA,WAAA,CACA,uBAAA,CAIJ,eACE,2BAAA,CACA,mBAAA,CACA,qBAAA,CACA,YAAA,CACA,oBAAA,CAEA,mBACE,UAAA,CACA,WAAA,CAIJ,kBACE,YAAA,CACA,iBAAA,CACA,6BAAA,CACA,UAAA,CAGF,gBACE,kBAAA,CACA,wBAAA,CACA,qBAAA,CACA,UAAA,CACA,cAAA,CACA,wBAAA,CACA,iBAAA,CACA,qBACE,QAAA,CAEF,sBACE,SAAA,CAGF,sBACE,aAAA,CACA,eAAA,CACA,wBAAA",sourcesContent:[".slider {\n  --slide-width: 31.35%; // divide 100 by # of slides and subtract 5%\n  --max-width: 100%;\n  max-width: var(--max-width);\n  overflow: hidden;\n  margin: 0 auto;\n  touch-action: none;\n  display: flex;\n  align-items: center;\n  position: relative;\n\n  &:hover {\n    cursor: grab;\n  }\n\n  &__slides {\n    display: flex;\n    position: relative;\n    left: calc(var(--slide-width) * -1);\n    &.slide-image {\n      --transition-speed: .5s;\n      transition: transform var(--transition-speed) cubic-bezier(0, 0, 1, 1);\n    }\n    &:after {\n      content: '';\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      left: var(--slide-width);\n    }\n  }\n\n  &__slide {\n    flex: 0 0 var(--slide-width); // the flex basis value is equal to the inverse of the left value above\n    padding-right: .5rem;\n    box-sizing: border-box;\n    display: grid;\n    place-content: center;\n\n    img {\n      width: 100%;\n      height: 100%;\n    }\n  }\n\n  &__controls {\n    display: flex;\n    position: absolute;\n    justify-content: space-between;\n    width: 100%;\n  }\n\n  &__button {\n    background: steelblue;\n    border: 1px solid steelblue;\n    padding: .5rem .625rem;\n    color: #fff;\n    font-size: 1rem;\n    transition: all 0.25s ease;\n    position: absolute;\n    &.left {\n      left: 5px;\n    }\n    &.right {\n      right: 5px;\n    }\n\n    &:hover {\n      color: steelblue;\n      background: white;\n      border: 1px solid steelblue;\n    }\n  }\n}\n"],sourceRoot:""}]);const o=l},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var i="",s=void 0!==t[5];return t[4]&&(i+="@supports (".concat(t[4],") {")),t[2]&&(i+="@media ".concat(t[2]," {")),s&&(i+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),i+=e(t),s&&(i+="}"),t[2]&&(i+="}"),t[4]&&(i+="}"),i})).join("")},t.i=function(e,i,s,n,r){"string"==typeof e&&(e=[[null,e,void 0]]);var l={};if(s)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(l[a]=!0)}for(var d=0;d<e.length;d++){var h=[].concat(e[d]);s&&l[h[0]]||(void 0!==r&&(void 0===h[5]||(h[1]="@layer".concat(h[5].length>0?" ".concat(h[5]):""," {").concat(h[1],"}")),h[5]=r),i&&(h[2]?(h[1]="@media ".concat(h[2]," {").concat(h[1],"}"),h[2]=i):h[2]=i),n&&(h[4]?(h[1]="@supports (".concat(h[4],") {").concat(h[1],"}"),h[4]=n):h[4]="".concat(n)),t.push(h))}},t}},537:e=>{e.exports=function(e){var t=e[1],i=e[3];if(!i)return t;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),n="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),r="/*# ".concat(n," */"),l=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[t].concat(l).concat([r]).join("\n")}return[t].join("\n")}},306:(e,t,i)=>{i.r(t),i.d(t,{default:()=>s});const s='<div class="slider"> <div class="slider__slides"></div> <button class="slider__button left"> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-caret-left-fill" viewBox="0 0 16 16"> <path d="m3.86 8.753 5.482 4.796c.646.566 1.658.106 1.658-.753V3.204a1 1 0 0 0-1.659-.753l-5.48 4.796a1 1 0 0 0 0 1.506z"/> </svg> </button> <button class="slider__button right"> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-caret-right-fill" viewBox="0 0 16 16"> <path d="m12.14 8.753-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z"/> </svg> </button> </div>'},811:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0});const s=i(819),n=i(306);document.createElement("template").innerHTML=n.default;class r extends HTMLElement{constructor(){super(),this.slides=[],this.imageOrder=[],this.isSlidingLeft=!0,this.isScrolling=!1,this.start=0,this.scrolled=0,this.slideWidthPx=0,this.settings={imagesId:void 0,autoplayStepTiming:2e3,autoplayCrawlTiming:6e3,numSlides:3,hideControls:!1},this.autoplay=()=>{},this.handleClick=e=>{const t=e.currentTarget;this.isSlidingLeft=t.classList.contains("left"),this.slidesWrapper.classList.add("slide-image"),this.slideX()},this.reorderSlides=()=>{if(this.slidesWrapper.classList.remove("slide-image"),Math.abs(this.scrolled)>0)return this.scrolled=0;let e=this.isSlidingLeft?this.slides.length-1:1;this.setSlidesFlexOrder(e),this.slideReset(),"crawl"===this.settings.autoplayMode&&setTimeout((()=>this.autoplay()))},this.handlePointerDown=e=>{e.preventDefault();const t=e.currentTarget;t.setPointerCapture(e.pointerId),t.style.cursor="grabbing",this.isScrolling=!0,this.start=e.clientX,this.clearAutoPlay(this.autoPlayIntervalID)},this.handlePointerMove=e=>{e.preventDefault(),this.isScrolling&&(console.log(this.scrolled,e.clientX),this.scrolled=e.clientX-this.start,this.isSlidingLeft=this.scrolled<0,this.slideX(),Math.abs(this.scrolled/this.slideWidthPx)>1&&(this.scrolled=0,this.reorderSlides(),this.start=e.clientX))},this.handlePointerUp=e=>{e.preventDefault(),this.slidesWrapper.classList.add("slide-image"),Math.abs(this.scrolled/this.slideWidthPx)>.5?(this.scrolled=0,this.slideX()):this.slideReset(),this.isScrolling=!1,this.autoplay()},this.slideX=()=>this.slidesWrapper.style.transform=this.scrolled?`translateX(${this.scrolled}px)`:`translateX(${(this.isSlidingLeft?-1:1)*this.slideWidthPx}px)`,this.slideReset=()=>this.slidesWrapper.style.transform="translateX(0)",this.settings=Object.assign(Object.assign({},this.settings),this.dataset),this.attachShadow({mode:"open"}),this.shadowDOM=this.shadowRoot,this.shadowDOM.innerHTML=n.default,this.addStyleSheet(),this.slidesWrapper=this.shadowDOM.querySelector(".slider__slides"),this.sliderButtons=this.shadowDOM.querySelectorAll("button");try{this.slides=this.initSlides(),this.slidesWrapper.append(...this.slides),this.imageOrder=this.initSlidesFlexOrder(this.slides),this.setSlidesFlexOrder(),this.handleUserSettings(),this.setEvents()}catch(e){e instanceof Error&&console.log(`Image Loading Error: ${e.message}`)}}initSlides(){const e=document.createElement("slot");if(e.name="slide",this.shadowDOM.append(e),!e.assignedNodes().length)throw new Error("No properly formatted images found");const t=Array.from({length:2*e.assignedNodes().length});for(let i=0;i<=t.length/2-1;i++){let[s]=e.assignedNodes();const n=document.createElement("div");n.classList.add("slider__slide"),n.append(s),t[i]=n,t[i+t.length/2]=n.cloneNode(!0)}return t}initAutoPlay(e){const{autoplayMode:t,autoplayStepTiming:i}=e,[s,n]=this.sliderButtons;return()=>{switch(t){case"crawl":return this.slidesWrapper.removeEventListener("pointerdown",this.handlePointerDown),this.slidesWrapper.removeEventListener("pointermove",this.handlePointerMove),this.slidesWrapper.removeEventListener("pointerup",this.handlePointerUp),this.isSlidingLeft?s.click():null==n?void 0:n.click();case"step":return this.autoPlayIntervalID=setInterval((()=>this.isSlidingLeft?s.click():null==n?void 0:n.click()),i)}}}clearAutoPlay(e){return clearInterval(e)}addStyleSheet(){const e=document.createElement("style");e.textContent=s.default,this.shadowDOM.append(e)}handleUserSettings(){this.autoplay=this.initAutoPlay(this.settings);const e=document.createElement("style");this.shadowDOM.append(e);const t=e.sheet;this.settings.maxWidth&&(null==t||t.insertRule(`.slider{--max-width:${this.settings.maxWidth}}`)),this.settings.numSlides&&(null==t||t.insertRule(`.slider{--slide-width:${Math.floor(100/+this.settings.numSlides*.95)}%}`)),this.settings.hideControls&&this.sliderButtons.forEach((e=>e.hidden=!0)),"crawl"===this.settings.autoplayMode&&(null==t||t.insertRule(`.slider__slides.slide-image{--transition-speed:${this.settings.autoplayCrawlTiming}ms`),null==t||t.insertRule(".slider:hover{cursor:default}"))}setEvents(){this.sliderButtons.forEach((e=>e.addEventListener("click",this.handleClick))),this.slidesWrapper.addEventListener("transitionend",this.reorderSlides),this.slidesWrapper.addEventListener("pointerdown",this.handlePointerDown),this.slidesWrapper.addEventListener("pointermove",this.handlePointerMove),this.slidesWrapper.addEventListener("pointerup",this.handlePointerUp),window.onload=()=>{this.slideWidthPx=this.slides[0].getBoundingClientRect().width,this.autoplay()},window.addEventListener("resize",(()=>this.slideWidthPx=this.slides[0].getBoundingClientRect().width))}initSlidesFlexOrder(e){return Array.from({length:e.length},((t,i)=>(i+1)%e.length))}setSlidesFlexOrder(e=0){this.slides.forEach(((t,i)=>{this.imageOrder[i]=(this.imageOrder[i]+e)%this.slides.length,t.style.order=this.imageOrder[i].toString()}))}}t.default=r}},t={};function i(s){var n=t[s];if(void 0!==n)return n.exports;var r=t[s]={id:s,exports:{}};return e[s](r,r.exports,i),r.exports}i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},i.d=(e,t)=>{for(var s in t)i.o(t,s)&&!i.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{const e=i(811);customElements.define("image-slider",e.default)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,